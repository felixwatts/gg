# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml



trigger:
- master

strategy:
  matrix:
    windows:
      imageName: 'vs2017-win2016'
      rustup_toolchain: stable
    mac:
      imageName: 'macOS-latest'
      rustup_toolchain: stable
    linux:
      imageName: 'ubuntu-16.04'
      rustup_toolchain: stable

pool:
  vmImage: $(imageName)

steps:
  - script: |
      curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $RUSTUP_TOOLCHAIN
      echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
      sudo apt install libasound2-dev libudev-dev libsystemd-dev pkg-config
    displayName: Install rust and build dependencies (Linux)
    condition: eq( variables['Agent.OS'], 'Linux' )

  - script: |
      curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $RUSTUP_TOOLCHAIN
      echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
    displayName: Install rust and build dependencies (MacOS)
    condition: eq( variables['Agent.OS'], 'Darwin' )

  - script: |
      curl -sSf -o rustup-init.exe https://win.rustup.rs
      rustup-init.exe -y --default-toolchain %RUSTUP_TOOLCHAIN% --default-host x86_64-pc-windows-msvc
      echo "##vso[task.setvariable variable=PATH;]%PATH%;%USERPROFILE%\.cargo\bin"
    displayName: Install rust (Windows)
    condition: eq( variables['Agent.OS'], 'Windows_NT' )

  - script: cargo test --all
    displayName: Cargo test

  - script: cargo build --release --bin ggc
    displayName: build client

  - script: cargo build --release --bin ggd --features "server"
    displayName: build server
    condition: eq( variables['Agent.OS'], 'Linux' )
    
  - publish: $(System.DefaultWorkingDirectory)/target/release/ggc.exe
    artifact: ggc-$(imageName)
    condition: eq( variables['Agent.OS'], 'Windows_NT' )
    displayName: Publish client artefact (Windows)

  - publish: $(System.DefaultWorkingDirectory)/target/release/ggc
    artifact: ggc-$(imageName)
    condition: ne( variables['Agent.OS'], 'Windows_NT' )
    displayName: Publish client artefact (Linux + MacOS)

  - publish: $(System.DefaultWorkingDirectory)/target/release/ggd
    artifact: ggd
    condition: eq( variables['Agent.OS'], 'Linux' )
    displayName: Publish server artefact
